// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id        String   @id @default(cuid())
  title     String
  content   String?
  thumbnail String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model Video {
  id          String   @id @default(cuid())
  title       String
  url         String
  description String?
  thumbnail   String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([id])
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  password     String
  firstName    String
  lastName     String
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  articles     Article[]
  videos       Video[]
  membership   Membership @relation(fields: [membershipId], references: [id])
  membershipId String
  articlesCount Int       @default(0)
  videosCount   Int       @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([id])
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Membership {
  id           String @id @default(cuid())
  package      String @unique
  articleLimit Int?
  videoLimit   Int?
  users        User[]
}
